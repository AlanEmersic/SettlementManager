@page "/"
@using ErrorOr
@using MediatR
@using SettlementManager.Application.Settlements.DTO
@using SettlementManager.Infrastructure.Persistence.Settlements.Queries.GetSettlements
@rendermode InteractiveServer
@inject ISender Mediator

<PageTitle>Settlement Manager App</PageTitle>

<h3>Settlements</h3>

@if (response is not null)
{
    <div class="input-group mb-3" style="max-width: 300px">
        <input class="form-control" @bind="searchTerm" type="text" placeholder="Search settlements...">
        <div class="input-group-append">
            <button class="btn btn-outline-primary mx-2" @onclick="Search">Search</button>
        </div>
    </div>

    <div class="mb-3">
        <label for="pageSizeSlider">Page Size: @pageSize</label>
        <input type="range" id="pageSizeSlider" min="5" max="50" step="5" @onchange="ChangePageSize" value="@pageSize"/>
    </div>

    <table class="table table-striped table-bordered table-hover">
        <thead>
        <tr>
            <th>#</th>
            <th>Country</th>
            <th>Settlement Name</th>
            <th>Postal Code</th>
        </tr>
        </thead>
        <tbody>
        @foreach (SettlementDto settlement in response.Settlements)
        {
            <tr>
                <td>@settlement.Id</td>
                <td>@settlement.Country.Name</td>
                <td>@settlement.Name</td>
                <td>@settlement.PostalCode</td>
            </tr>
        }
        </tbody>
    </table>

    <div class="pagination justify-content-center">
        <li class="page-item">
            <button class="page-link" @onclick="FirstPage" disabled="@(!response.HasPreviousPage)">First</button>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="PreviousPage" disabled="@(!response.HasPreviousPage)">Previous</button>
        </li>
        <li class="page-item active">
            <span class="page-link">Page @response.PageNumber of @response.PageCount</span>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="NextPage" disabled="@(!response.HasNextPage)">Next</button>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="LastPage" disabled="@(!response.HasNextPage)">Last</button>
        </li>
    </div>

    <div class="">
        <h5>Total settlements: @response.TotalCount</h5>
        <h5>Total pages: @response.PageCount</h5>
    </div>
}
else if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <p>No settlements found.</p>
}

@code {
    private SettlementPagedResponse? response;
    private string? searchTerm;
    private int currentPage = 1;
    private int pageSize = 10;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettlements();
    }

    private async Task LoadSettlements()
    {
        isLoading = true;
        GetSettlementsQuery request = new GetSettlementsQuery(searchTerm, currentPage, pageSize);
        ErrorOr<SettlementPagedResponse> result = await Mediator.Send(request);

        result.Match(
            success =>
            {
                response = success;
                isLoading = false;

                return string.Empty;
            },
            error =>
            {
                response = null;
                isLoading = false;

                return string.Empty;
            });
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadSettlements();
    }

    private async Task NextPage()
    {
        if (response!.HasNextPage)
        {
            currentPage++;
            await LoadSettlements();
        }
    }

    private async Task PreviousPage()
    {
        if (response!.HasPreviousPage)
        {
            currentPage--;
            await LoadSettlements();
        }
    }

    private async Task FirstPage()
    {
        currentPage = 1;
        await LoadSettlements();
    }

    private async Task LastPage()
    {
        currentPage = response!.PageCount;
        await LoadSettlements();
    }

    private async Task ChangePageSize(ChangeEventArgs changeEvent)
    {
        currentPage = 1;
        pageSize = int.Parse(changeEvent.Value!.ToString()!);
        await LoadSettlements();
    }
}