@using SettlementManager.Application.Settlements.DTO

@if (CurrentResponse is not null && CurrentResponse.TotalCount > 0)
{
    <div class="mb-3">
        <label for="pageSizeSlider">Page Size: @PageSize</label>
        <input type="range" id="pageSizeSlider" min="5" max="50" step="5" @onchange="ChangePageSize" value="@PageSize"/>
    </div>

    <button class="btn btn-primary mb-3" @onclick="OpenAddSettlementModal">Add New Settlement</button>

    <table class="table table-striped table-bordered table-hover">
        <thead>
        <tr>
            <th>#</th>
            <th>Country</th>
            <th>Settlement Name</th>
            <th>Postal Code</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (SettlementDto settlement in CurrentResponse!.Settlements)
        {
            <tr>
                <td>@settlement.Id</td>
                <td>@settlement.Country.Name</td>
                <td>@settlement.Name</td>
                <td>@settlement.PostalCode</td>
                <td>
                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditSettlementModal(settlement)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(settlement)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <div class="pagination justify-content-center">
        <li class="page-item">
            <button class="page-link" @onclick="FirstPage" disabled="@(!CurrentResponse!.HasPreviousPage)">First</button>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="PreviousPage" disabled="@(!CurrentResponse!.HasPreviousPage)">Previous</button>
        </li>
        <li class="page-item active">
            <span class="page-link">Page @CurrentResponse!.PageNumber of @CurrentResponse!.PageCount</span>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="NextPage" disabled="@(!CurrentResponse!.HasNextPage)">Next</button>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="LastPage" disabled="@(!CurrentResponse!.HasNextPage)">Last</button>
        </li>
    </div>

    <div class="">
        <h5>Total settlements: @CurrentResponse!.TotalCount</h5>
        <h5>Total pages: @CurrentResponse!.PageCount</h5>
    </div>
}
else
{
    <p>No settlements found.</p>
}

@code {
    [Parameter] public SettlementPagedDto? CurrentResponse { get; set; }

    [Parameter] public int PageSize { get; set; }

    [Parameter] public EventCallback<int> OnPageSizeChange { get; set; }

    [Parameter] public EventCallback OnAddSettlement { get; set; }

    [Parameter] public EventCallback<SettlementDto> OnEditSettlement { get; set; }

    [Parameter] public EventCallback<SettlementDto> OnDeleteSettlement { get; set; }

    [Parameter] public EventCallback OnSearchSettlements { get; set; }

    [Parameter] public EventCallback OnFirstPage { get; set; }

    [Parameter] public EventCallback OnNextPage { get; set; }

    [Parameter] public EventCallback OnPreviousPage { get; set; }

    [Parameter] public EventCallback OnLastPage { get; set; }

    private async Task ChangePageSize(ChangeEventArgs changeEvent)
    {
        if (int.TryParse(changeEvent.Value?.ToString(), out int pageSize))
        {
            await OnPageSizeChange.InvokeAsync(pageSize);
        }
    }

    private async Task OpenAddSettlementModal() => await OnAddSettlement.InvokeAsync();

    private async Task OpenEditSettlementModal(SettlementDto settlement) => await OnEditSettlement.InvokeAsync(settlement);

    private async Task OpenDeleteConfirmationModal(SettlementDto settlement) => await OnDeleteSettlement.InvokeAsync(settlement);

    private async Task SearchSettlements() => await OnSearchSettlements.InvokeAsync();

    private async Task FirstPage() => await OnFirstPage.InvokeAsync();

    private async Task NextPage() => await OnNextPage.InvokeAsync();

    private async Task PreviousPage() => await OnPreviousPage.InvokeAsync();

    private async Task LastPage() => await OnLastPage.InvokeAsync();
}